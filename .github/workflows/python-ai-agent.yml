name: Python AI Agent - Install and Use

on:
  push:
    branches: [ main, ai-coding-agent, develop ]
    paths:
      - 'ai_coding_agent/**'
      - 'requirements.txt'
      - 'pyproject.toml'
      - 'tests/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'ai_coding_agent/**'
      - 'requirements.txt'
      - 'pyproject.toml'
      - 'tests/**'
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version to use'
        required: false
        default: '3.11'
        type: choice
        options:
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
      run_tests:
        description: 'Run tests'
        required: false
        default: true
        type: boolean
      run_demo:
        description: 'Run demo scripts'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: ${{ github.event.inputs.python_version || '3.11' }}

jobs:
  # Install and Setup Python AI Agent
  install-agent:
    name: Install Python AI Agent
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ env.PYTHON_VERSION }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        pip install black flake8 mypy
        pip install safety
        
    - name: Verify installation
      run: |
        python -c "import ai_coding_agent; print('✅ AI Agent imported successfully')"
        python -c "from ai_coding_agent.core.agent import AICodingAgent; print('✅ AICodingAgent class imported')"
        
    - name: Upload installation logs
      uses: actions/upload-artifact@v4
      with:
        name: installation-logs
        path: |
          ~/.cache/pip/
        retention-days: 7

  # Code Quality Checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: install-agent
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 mypy safety
        
    - name: Run code formatting check
      run: |
        black --check --diff ai_coding_agent/ tests/
        
    - name: Run linting with flake8
      run: |
        flake8 ai_coding_agent/ tests/ --max-line-length=100 --ignore=E203,W503 --count --statistics
        
    - name: Run type checking with mypy
      run: |
        mypy ai_coding_agent/ --ignore-missing-imports --show-error-codes
        
    - name: Run security check
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports
        path: safety-report.json
        retention-days: 30

  # Run Tests
  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: install-agent
    if: ${{ github.event.inputs.run_tests != 'false' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Run Python tests
      run: |
        python -m pytest tests/ -v --cov=ai_coding_agent --cov-report=xml --cov-report=html --cov-report=term
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python-ai-agent
        name: python-coverage
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          htmlcov/
          .coverage
        retention-days: 30

  # Run Demo Scripts
  run-demos:
    name: Run Demo Scripts
    runs-on: ubuntu-latest
    needs: install-agent
    if: ${{ github.event.inputs.run_demo != 'false' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run simple demo
      run: |
        python simple_demo.py
      continue-on-error: true
        
    - name: Run main demo
      run: |
        python demo.py
      continue-on-error: true
        
    - name: Test CLI interface
      run: |
        python -m ai_coding_agent.cli --help
      continue-on-error: true
        
    - name: Upload demo logs
      uses: actions/upload-artifact@v4
      with:
        name: demo-logs
        path: |
          *.log
        retention-days: 7

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: install-agent
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark memory-profiler
        
    - name: Run performance tests
      run: |
        python -m pytest tests/ -k "test_performance" -v --benchmark-only || echo "No performance tests found"
        
    - name: Memory profiling
      run: |
        python -c "
        import ai_coding_agent
        from memory_profiler import profile
        @profile
        def test_memory():
            agent = ai_coding_agent.core.agent.AICodingAgent()
            return agent
        test_memory()
        " || echo "Memory profiling completed"
        
    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports
        path: |
          .benchmarks/
        retention-days: 30

  # Integration Testing
  integration-test:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: [install-agent, run-tests]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Test AI Agent initialization
      run: |
        python -c "
        from ai_coding_agent.core.agent import AICodingAgent
        from ai_coding_agent.core.config import Config
        config = Config()
        agent = AICodingAgent(config)
        print('✅ AI Agent initialized successfully')
        "
        
    - name: Test code analysis
      run: |
        python -c "
        from ai_coding_agent.analyzers.code_analyzer import CodeAnalyzer
        analyzer = CodeAnalyzer()
        print('✅ Code analyzer initialized')
        "
        
    - name: Test code generation
      run: |
        python -c "
        from ai_coding_agent.generators.code_generator import CodeGenerator
        generator = CodeGenerator()
        print('✅ Code generator initialized')
        "
        
    - name: Test providers
      run: |
        python -c "
        from ai_coding_agent.providers.openai_provider import OpenAIProvider
        from ai_coding_agent.providers.anthropic_provider import AnthropicProvider
        print('✅ Providers imported successfully')
        "

  # Create Release Package
  create-package:
    name: Create Release Package
    runs-on: ubuntu-latest
    needs: [install-agent, run-tests, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine
        
    - name: Build Python package
      run: |
        python -m build
        
    - name: Create release archive
      run: |
        tar -czf ai-coding-agent-${{ github.run_number }}.tar.gz ai_coding_agent/ requirements.txt pyproject.toml README-python.md
        zip -r ai-coding-agent-${{ github.run_number }}.zip ai_coding_agent/ requirements.txt pyproject.toml README-python.md
        
    - name: Upload release packages
      uses: actions/upload-artifact@v4
      with:
        name: python-ai-agent-packages
        path: |
          ai-coding-agent-${{ github.run_number }}.tar.gz
          ai-coding-agent-${{ github.run_number }}.zip
          dist/
        retention-days: 30

  # Notify Results
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [install-agent, code-quality, run-tests, run-demos, performance-test, integration-test]
    if: always()
    
    steps:
    - name: Notify Success
      if: success()
      run: |
        echo "✅ Python AI Agent installation and testing completed successfully!"
        echo "🎉 All checks passed"
        echo "📦 Package ready for distribution"
        
    - name: Notify Failure
      if: failure()
      run: |
        echo "❌ Some Python AI Agent checks failed"
        echo "Please review the logs for details"
        echo "🔧 Check installation, tests, or demo scripts"
