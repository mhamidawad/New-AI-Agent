name: Python AI Agent - Install and Use (Fixed)

on:
  push:
    branches: [ main, ai-coding-agent, develop ]
    paths:
      - 'ai_coding_agent/**'
      - 'requirements.txt'
      - 'pyproject.toml'
      - 'tests/**'
      - 'demo.py'
      - 'simple_demo.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'ai_coding_agent/**'
      - 'requirements.txt'
      - 'pyproject.toml'
      - 'tests/**'
      - 'demo.py'
      - 'simple_demo.py'
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version to use'
        required: false
        default: '3.11'
        type: choice
        options:
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
      run_tests:
        description: 'Run tests'
        required: false
        default: true
        type: boolean
      run_demo:
        description: 'Run demo scripts'
        required: false
        default: true
        type: boolean
      deploy:
        description: 'Deploy to PyPI'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: ${{ github.event.inputs.python_version || '3.11' }}

jobs:
  # Install and Setup Python AI Agent
  install-agent:
    name: Install Python AI Agent
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ env.PYTHON_VERSION }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt found, skipping dependency installation"
          fi
          pip install pytest pytest-cov pytest-asyncio
          pip install black flake8 mypy
          pip install safety

      - name: Verify installation
        run: |
          if [ -d "ai_coding_agent" ]; then
            echo "✅ ai_coding_agent directory found"
            python -c "import ai_coding_agent; print('✅ AI Agent imported successfully')" || echo "⚠️ Could not import ai_coding_agent"
          else
            echo "⚠️ ai_coding_agent directory not found"
          fi

          python -c "
          try:
              from ai_coding_agent.core.agent import AICodingAgent
              print('✅ AICodingAgent class imported')
          except ImportError as e:
              print(f'⚠️ Could not import AICodingAgent: {e}')
          " || echo "⚠️ AICodingAgent import failed"

      - name: Upload installation logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: installation-logs
          path: |
            ~/.cache/pip/
          retention-days: 7

  # Run Tests
  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: install-agent
    if: ${{ github.event.inputs.run_tests != 'false' || github.event_name != 'workflow_dispatch' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest pytest-cov pytest-asyncio

      - name: Run Python tests
        run: |
          if [ -d "tests" ]; then
            python -m pytest tests/ -v --cov=ai_coding_agent --cov-report=xml --cov-report=html --cov-report=term || echo "⚠️ Some tests failed"
          else
            echo "⚠️ tests directory not found, skipping tests"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success() || failure()
        with:
          file: ./coverage.xml
          flags: python-ai-agent
          name: python-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            htmlcov/
            .coverage
          retention-days: 30

  # Build Package
  build-package:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: [install-agent, run-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build tool
        run: |
          python -m pip install --upgrade pip build

      - name: Build package
        run: |
          if [ -f "pyproject.toml" ]; then
            python -m build
          else
            echo "❌ pyproject.toml not found" && exit 1
          fi

      - name: Upload built distributions
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 30

  # Deploy Package
  deploy-package:
    name: Deploy Package to PyPI
    runs-on: ubuntu-latest
    needs: build-package
    if: github.event.inputs.deploy == 'true' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-packages
          path: dist/

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Twine
        run: |
          python -m pip install --upgrade twine

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*
